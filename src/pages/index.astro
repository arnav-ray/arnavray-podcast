---
import Layout from '../layouts/Layout.astro';

const title = 'Daily AI Podcasts - 5 Categories in English & German';
---

<Layout title={title}>
  <main>
    <header class="hero">
      <div class="hero-content">
        <h1>🎧 Daily AI Podcasts</h1>
        <p>Spicy commentary, hot takes & insider insights</p>
      </div>
      <div class="controls">
        <div class="language-toggle">
          <span>EN</span>
          <label class="switch">
            <input type="checkbox" id="languageToggle">
            <span class="slider"></span>
          </label>
          <span>DE</span>
        </div>
        <button class="theme-toggle" id="themeToggle">🌙</button>
      </div>
    </header>

    <section class="bunches-grid">
      <div class="categories" id="categoriesGrid">
        <div class="category-card" data-bunch="ai-tech">
          <div class="category-header">
            <div class="category-icon">🤖</div>
            <h3>AI & Tech</h3>
          </div>
          <p>Cutting-edge tech, AI breakthroughs, startup drama</p>
          <div class="recent-episodes" id="ai-tech-episodes">
            <div class="loading-placeholder">Loading episodes...</div>
          </div>
          <button class="generate-btn" data-bunch="ai-tech">Generate Today's Episode</button>
        </div>
        
        <div class="category-card" data-bunch="finance-business">
          <div class="category-header">
            <div class="category-icon">💰</div>
            <h3>Finance & Business</h3>
          </div>
          <p>Market moves, IPOs, mergers, financial scandals</p>
          <div class="recent-episodes" id="finance-business-episodes">
            <div class="loading-placeholder">Loading episodes...</div>
          </div>
          <button class="generate-btn" data-bunch="finance-business">Generate Today's Episode</button>
        </div>
        
        <div class="category-card" data-bunch="leadership-strategy">
          <div class="category-header">
            <div class="category-icon">🎯</div>
            <h3>Leadership & Strategy</h3>
          </div>
          <p>CEO insights, management trends, strategic thinking</p>
          <div class="recent-episodes" id="leadership-strategy-episodes">
            <div class="loading-placeholder">Loading episodes...</div>
          </div>
          <button class="generate-btn" data-bunch="leadership-strategy">Generate Today's Episode</button>
        </div>
        
        <div class="category-card" data-bunch="science-innovation">
          <div class="category-header">
            <div class="category-icon">🔬</div>
            <h3>Science & Innovation</h3>
          </div>
          <p>Research breakthroughs, scientific discoveries</p>
          <div class="recent-episodes" id="science-innovation-episodes">
            <div class="loading-placeholder">Loading episodes...</div>
          </div>
          <button class="generate-btn" data-bunch="science-innovation">Generate Today's Episode</button>
        </div>
        
        <div class="category-card" data-bunch="sunday-specials">
          <div class="category-header">
            <div class="category-icon">🎭</div>
            <h3>Sunday Specials</h3>
          </div>
          <p>Lifestyle, humor, culture, weekend vibes</p>
          <div class="recent-episodes" id="sunday-specials-episodes">
            <div class="loading-placeholder">Loading episodes...</div>
          </div>
          <button class="generate-btn" data-bunch="sunday-specials">Generate Today's Episode</button>
        </div>
      </div>
    </section>

    <section class="history-section">
      <h2>📅 Episode Archive</h2>
      <div class="history-controls">
        <select id="historyFilter">
          <option value="all">All Episodes</option>
          <option value="ai-tech">AI & Tech</option>
          <option value="finance-business">Finance & Business</option>
          <option value="leadership-strategy">Leadership & Strategy</option>
          <option value="science-innovation">Science & Innovation</option>
          <option value="sunday-specials">Sunday Specials</option>
        </select>
        <select id="languageFilter">
          <option value="all">All Languages</option>
          <option value="en">English</option>
          <option value="de">German</option>
        </select>
      </div>
      <div id="historyGrid" class="history-grid">
        <!-- Episodes will be loaded here -->
      </div>
    </section>
  </main>

  <!-- Episode Modal -->
  <div id="episodeModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <div id="modalContent">
        <!-- Episode details will be loaded here -->
      </div>
    </div>
  </div>
</Layout>

<script>
  // Voice configurations for proper language support
  const VOICE_CONFIG = {
    en: {
      host: { 
        rate: 1.05,
        pitch: 1.15,
        preferredVoices: ['Google UK English Female', 'Microsoft Zira', 'Samantha', 'Karen']
      },
      expert: { 
        rate: 0.9,
        pitch: 0.85,
        preferredVoices: ['Google UK English Male', 'Microsoft David', 'Daniel', 'Oliver']
      }
    },
    de: {
      host: { 
        rate: 0.95,
        pitch: 1.1,
        preferredVoices: ['Google Deutsch', 'Microsoft Hedda', 'Anna', 'Marlene']
      },
      expert: { 
        rate: 0.85,
        pitch: 0.8,
        preferredVoices: ['Google Deutsch', 'Microsoft Stefan', 'Hans', 'Conrad']
      }
    }
  };

  let currentLanguage = 'en';
  let episodeHistory = {};
  let isPlaying = false;

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    initializeTheme();
    initializeLanguage();
    setupEventListeners();
    loadEpisodeHistory();
    loadVoices();
  });

  function initializeTheme() {
    const theme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', theme);
    updateThemeToggle(theme);
  }

  function initializeLanguage() {
    const savedLang = localStorage.getItem('language') || 'en';
    currentLanguage = savedLang;
    document.getElementById('languageToggle').checked = savedLang === 'de';
    updateLanguageUI();
  }

  function updateThemeToggle(theme) {
    const themeToggle = document.getElementById('themeToggle');
    themeToggle.textContent = theme === 'dark' ? '☀️' : '🌙';
  }

  function setupEventListeners() {
    // Theme toggle
    document.getElementById('themeToggle').addEventListener('click', () => {
      const currentTheme = document.documentElement.getAttribute('data-theme');
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      updateThemeToggle(newTheme);
    });

    // Language toggle
    document.getElementById('languageToggle').addEventListener('change', (e) => {
      currentLanguage = e.target.checked ? 'de' : 'en';
      localStorage.setItem('language', currentLanguage);
      updateLanguageUI();
      loadEpisodeHistory();
    });

    // Generate buttons
    document.querySelectorAll('.generate-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const bunch = e.target.getAttribute('data-bunch');
        await generateEpisode(bunch);
      });
    });

    // Modal close
    document.querySelector('.close').addEventListener('click', () => {
      closeModal();
    });

    // History filters
    document.getElementById('historyFilter').addEventListener('change', filterHistory);
    document.getElementById('languageFilter').addEventListener('change', filterHistory);
  }

  function updateLanguageUI() {
    // Update button texts based on language
    document.querySelectorAll('.generate-btn').forEach(btn => {
      btn.textContent = currentLanguage === 'de' ? 
        'Heutige Folge generieren' : 
        "Generate Today's Episode";
    });

    // Update section titles
    const historyTitle = document.querySelector('.history-section h2');
    if (historyTitle) {
      historyTitle.textContent = currentLanguage === 'de' ? 
        '📅 Episodenarchiv' : 
        '📅 Episode Archive';
    }
  }

  async function generateEpisode(bunch) {
    const btn = document.querySelector(`[data-bunch="${bunch}"] .generate-btn`);
    const episodesContainer = document.getElementById(`${bunch}-episodes`);
    
    // Show loading state
    btn.disabled = true;
    btn.textContent = currentLanguage === 'de' ? 'Generiere...' : 'Generating...';
    
    try {
      const response = await fetch(`/.netlify/functions/generate-podcast?bunch=${bunch}&lang=${currentLanguage}`);
      const data = await response.json();
      
      if (data.success && data.episode) {
        // Store episode
        storeEpisode(data.episode);
        
        // Show episode in the card
        displayEpisodeInCard(data.episode, episodesContainer);
        
        // Open modal with episode
        showEpisodeModal(data.episode);
      } else {
        alert(data.error || 'Failed to generate episode');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Network error. Please try again.');
    } finally {
      btn.disabled = false;
      updateLanguageUI();
    }
  }

  function storeEpisode(episode) {
    const key = `${episode.bunch}-${episode.language}`;
    if (!episodeHistory[key]) {
      episodeHistory[key] = [];
    }
    
    // Remove existing episode for today if any
    episodeHistory[key] = episodeHistory[key].filter(ep => ep.date !== episode.date);
    
    // Add new episode at the beginning
    episodeHistory[key].unshift(episode);
    
    // Keep only last 7 episodes per category
    episodeHistory[key] = episodeHistory[key].slice(0, 7);
    
    // Save to localStorage
    localStorage.setItem('episodeHistory', JSON.stringify(episodeHistory));
  }

  function loadEpisodeHistory() {
    const saved = localStorage.getItem('episodeHistory');
    if (saved) {
      episodeHistory = JSON.parse(saved);
    }
    
    // Display episodes in cards
    Object.keys(episodeHistory).forEach(key => {
      const [bunch, lang] = key.split('-');
      if (lang === currentLanguage) {
        const episodes = episodeHistory[key] || [];
        const container = document.getElementById(`${bunch}-episodes`);
        if (container && episodes.length > 0) {
          displayEpisodesInCard(episodes.slice(0, 3), container);
        }
      }
    });
    
    // Update history grid
    updateHistoryGrid();
  }

  function displayEpisodesInCard(episodes, container) {
    container.innerHTML = episodes.map(ep => `
      <div class="episode-item" onclick="showEpisodeModal(${JSON.stringify(ep).replace(/"/g, '&quot;')})">
        <div class="episode-date">${new Date(ep.date).toLocaleDateString()}</div>
        <div class="episode-title">${ep.title}</div>
      </div>
    `).join('');
  }

  function displayEpisodeInCard(episode, container) {
    const existingEpisodes = episodeHistory[`${episode.bunch}-${episode.language}`] || [];
    displayEpisodesInCard(existingEpisodes.slice(0, 3), container);
  }

  function showEpisodeModal(episode) {
    const modal = document.getElementById('episodeModal');
    const modalContent = document.getElementById('modalContent');
    
    modalContent.innerHTML = `
      <div class="episode-modal-header">
        <h2>${episode.title}</h2>
        <div class="episode-meta">
          <span class="episode-badge">${episode.bunch.replace('-', ' ').toUpperCase()}</span>
          <span class="episode-badge">${episode.language.toUpperCase()}</span>
          <span class="episode-duration">~${episode.duration}</span>
        </div>
      </div>
      
      <div class="episode-description">
        <p>${episode.description}</p>
      </div>
      
      <div class="audio-controls">
        <button class="play-btn" id="playBtn" data-script="${episode.script.replace(/"/g, '&quot;')}" data-language="${episode.language}">
          ▶️ ${currentLanguage === 'de' ? 'Abspielen' : 'Play Episode'}
        </button>
        <button class="stop-btn" id="stopBtn" style="display: none;">
          ⏹️ Stop
        </button>
      </div>
      
      <div class="voice-info">
        <strong>${currentLanguage === 'de' ? 'Sprecher:' : 'Hosts:'}</strong>
        ${episode.hosts.main} & ${episode.hosts.expert}
      </div>
      
      <details class="transcript">
        <summary>${currentLanguage === 'de' ? '📝 Transkript anzeigen' : '📝 View Transcript'}</summary>
        <div class="transcript-content">${formatTranscript(episode.script)}</div>
      </details>
      
      <div class="articles-section">
        <h3>${currentLanguage === 'de' ? '📰 Verwendete Artikel' : '📰 Articles Used'}</h3>
        <ul class="articles-list">
          ${episode.articles.map(article => `
            <li>
              <a href="${article.link}" target="_blank">${article.title}</a>
              <span class="article-meta">${article.source} • Score: ${article.score}</span>
            </li>
          `).join('')}
        </ul>
      </div>
    `;
    
    // Setup audio controls
    setupAudioControls();
    
    modal.style.display = 'block';
  }

  function closeModal() {
    const modal = document.getElementById('episodeModal');
    modal.style.display = 'none';
    
    // Stop any playing audio
    if (speechSynthesis.speaking) {
      speechSynthesis.cancel();
      isPlaying = false;
    }
  }

  window.onclick = function(event) {
    const modal = document.getElementById('episodeModal');
    if (event.target === modal) {
      closeModal();
    }
  }

  function formatTranscript(script) {
    return script
      .split('\n\n')
      .map(paragraph => {
        if (paragraph.includes(':')) {
          const colonIndex = paragraph.indexOf(':');
          const speaker = paragraph.substring(0, colonIndex);
          const text = paragraph.substring(colonIndex + 1);
          return `<div class="dialogue-line">
            <span class="speaker">${speaker}:</span>
            <span class="dialogue-text">${text}</span>
          </div>`;
        }
        return `<p>${paragraph}</p>`;
      })
      .join('');
  }

  function setupAudioControls() {
    const playBtn = document.getElementById('playBtn');
    const stopBtn = document.getElementById('stopBtn');
    
    if (playBtn) {
      playBtn.addEventListener('click', () => {
        const script = playBtn.getAttribute('data-script');
        const language = playBtn.getAttribute('data-language');
        playEpisode(script, language);
        playBtn.style.display = 'none';
        stopBtn.style.display = 'inline-block';
      });
    }
    
    if (stopBtn) {
      stopBtn.addEventListener('click', () => {
        stopPlayback();
        playBtn.style.display = 'inline-block';
        stopBtn.style.display = 'none';
      });
    }
  }

  function loadVoices() {
    if ('speechSynthesis' in window) {
      speechSynthesis.getVoices();
      speechSynthesis.addEventListener('voiceschanged', () => {
        const voices = speechSynthesis.getVoices();
        console.log('Available voices:', voices.map(v => `${v.name} (${v.lang})`));
      });
    }
  }

  function findBestVoice(speakerType, language) {
    const voices = speechSynthesis.getVoices();
    const config = VOICE_CONFIG[language][speakerType];
    
    // Try preferred voices
    for (const preferred of config.preferredVoices) {
      const voice = voices.find(v => v.name.includes(preferred));
      if (voice) return voice;
    }
    
    // Fallback to language match
    const langCode = language === 'de' ? 'de-DE' : 'en-GB';
    return voices.find(v => v.lang === langCode) || voices[0];
  }

  async function playEpisode(script, language) {
    if (isPlaying) return;
    
    isPlaying = true;
    const dialogueParts = parseDialogue(script);
    
    for (const part of dialogueParts) {
      if (!isPlaying) break;
      
      const utterance = new SpeechSynthesisUtterance(part.text);
      const config = VOICE_CONFIG[language][part.type];
      
      utterance.rate = config.rate;
      utterance.pitch = config.pitch;
      utterance.voice = findBestVoice(part.type, language);
      
      await new Promise(resolve => {
        utterance.onend = resolve;
        utterance.onerror = () => {
          console.error('Speech error');
          resolve();
        };
        speechSynthesis.speak(utterance);
      });
      
      // Pause between speakers
      if (isPlaying) {
        await new Promise(resolve => setTimeout(resolve, 300));
      }
    }
    
    isPlaying = false;
    document.getElementById('playBtn').style.display = 'inline-block';
    document.getElementById('stopBtn').style.display = 'none';
  }

  function parseDialogue(script) {
    const lines = script.split('\n\n').filter(line => line.trim());
    const parts = [];
    
    for (const line of lines) {
      if (line.includes(':')) {
        const colonIndex = line.indexOf(':');
        const speaker = line.substring(0, colonIndex).trim();
        const text = line.substring(colonIndex + 1).trim();
        
        if (text) {
          const speakerLower = speaker.toLowerCase();
          const isHost = speakerLower.includes('alex') || speakerLower.includes('markus');
          parts.push({
            speaker,
            text,
            type: isHost ? 'host' : 'expert'
          });
        }
      }
    }
    
    return parts;
  }

  function stopPlayback() {
    isPlaying = false;
    speechSynthesis.cancel();
  }

  function updateHistoryGrid() {
    const grid = document.getElementById('historyGrid');
    const filter = document.getElementById('historyFilter').value;
    const langFilter = document.getElementById('languageFilter').value;
    
    const allEpisodes = [];
    
    Object.keys(episodeHistory).forEach(key => {
      const episodes = episodeHistory[key] || [];
      episodes.forEach(ep => {
        if ((filter === 'all' || ep.bunch === filter) &&
            (langFilter === 'all' || ep.language === langFilter)) {
          allEpisodes.push(ep);
        }
      });
    });
    
    // Sort by date
    allEpisodes.sort((a, b) => new Date(b.date) - new Date(a.date));
    
    grid.innerHTML = allEpisodes.map(ep => `
      <div class="history-item" onclick='showEpisodeModal(${JSON.stringify(ep).replace(/'/g, '&apos;')})'>
        <div class="history-date">${new Date(ep.date).toLocaleDateString()}</div>
        <div class="history-title">${ep.title}</div>
        <div class="history-meta">
          <span class="history-badge">${ep.bunch.replace('-', ' ')}</span>
          <span class="history-lang">${ep.language.toUpperCase()}</span>
        </div>
      </div>
    `).join('') || '<p class="no-episodes">No episodes yet. Generate your first episode!</p>';
  }

  function filterHistory() {
    updateHistoryGrid();
  }

  // Make showEpisodeModal available globally
  window.showEpisodeModal = showEpisodeModal;
</script>

<style>
  :root {
    --primary: #3b82f6;
    --primary-dark: #2563eb;
    --secondary: #10b981;
    --background: #ffffff;
    --surface: #f8fafc;
    --text: #1f2937;
    --text-secondary: #6b7280;
    --border: #e5e7eb;
    --shadow: rgba(0, 0, 0, 0.1);
  }

  [data-theme="dark"] {
    --primary: #60a5fa;
    --primary-dark: #3b82f6;
    --secondary: #34d399;
    --background: #0f172a;
    --surface: #1e293b;
    --text: #f1f5f9;
    --text-secondary: #94a3b8;
    --border: #334155;
    --shadow: rgba(0, 0, 0, 0.3);
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: system-ui, -apple-system, sans-serif;
    background: var(--background);
    color: var(--text);
    line-height: 1.6;
    transition: background 0.3s ease, color 0.3s ease;
  }

  main {
    max-width: 1400px;
    margin: 0 auto;
    padding: 20px;
  }

  .hero {
    background: var(--surface);
    border-radius: 20px;
    padding: 2rem;
    margin-bottom: 3rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 4px 6px var(--shadow);
  }

  .hero h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }

  .hero p {
    color: var(--text-secondary);
    font-size: 1.1rem;
  }

  .controls {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  .language-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
  }

  .switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 30px;
  }

  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--border);
    transition: .4s;
    border-radius: 30px;
  }

  .slider:before {
    position: absolute;
    content: "";
    height: 22px;
    width: 22px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
  }

  input:checked + .slider {
    background-color: var(--primary);
  }

  input:checked + .slider:before {
    transform: translateX(30px);
  }

  .theme-toggle {
    background: var(--surface);
    border: 2px solid var(--border);
    border-radius: 50%;
    width: 45px;
    height: 45px;
    font-size: 1.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .theme-toggle:hover {
    background: var(--primary);
    border-color: var(--primary);
  }

  .categories {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
  }

  .category-card {
    background: var(--surface);
    border-radius: 16px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px var(--shadow);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .category-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 12px var(--shadow);
  }

  .category-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .category-icon {
    font-size: 2.5rem;
  }

  .category-card h3 {
    font-size: 1.4rem;
    color: var(--text);
  }

  .category-card p {
    color: var(--text-secondary);
    margin-bottom: 1.5rem;
  }

  .recent-episodes {
    background: var(--background);
    border-radius: 12px;
    padding: 1rem;
    margin-bottom: 1rem;
    min-height: 120px;
  }

  .loading-placeholder {
    color: var(--text-secondary);
    text-align: center;
    padding: 2rem;
  }

  .episode-item {
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    background: var(--surface);
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .episode-item:hover {
    background: var(--primary);
    color: white;
  }

  .episode-date {
    font-size: 0.85rem;
    opacity: 0.8;
  }

  .episode-title {
    font-weight: 500;
  }

  .generate-btn {
    width: 100%;
    background: var(--primary);
    color: white;
    border: none;
    padding: 1rem;
    border-radius: 12px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .generate-btn:hover:not(:disabled) {
    background: var(--primary-dark);
    transform: translateY(-2px);
  }

  .generate-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .history-section {
    margin-top: 4rem;
  }

  .history-section h2 {
    font-size: 2rem;
    margin-bottom: 1.5rem;
  }

  .history-controls {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .history-controls select {
    background: var(--surface);
    color: var(--text);
    border: 2px solid var(--border);
    padding: 0.75rem 1rem;
    border-radius: 8px;
    font-size: 1rem;
    cursor: pointer;
  }

  .history-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  .history-item {
    background: var(--surface);
    padding: 1.5rem;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .history-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px var(--shadow);
  }

  .history-date {
    color: var(--text-secondary);
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
  }

  .history-title {
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .history-meta {
    display: flex;
    gap: 0.5rem;
  }

  .history-badge, .history-lang {
    font-size: 0.8rem;
    padding: 0.25rem 0.75rem;
    background: var(--background);
    border-radius: 20px;
  }

  .no-episodes {
    text-align: center;
    color: var(--text-secondary);
    padding: 3rem;
  }

  /* Modal Styles */
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
  }

  .modal-content {
    background: var(--background);
    margin: 2% auto;
    padding: 2rem;
    border-radius: 20px;
    width: 90%;
    max-width: 800px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 20px 40px var(--shadow);
  }

  .close {
    color: var(--text-secondary);
    float: right;
    font-size: 2rem;
    font-weight: bold;
    cursor: pointer;
    line-height: 1;
  }

  .close:hover {
    color: var(--text);
  }

  .episode-modal-header h2 {
    margin-bottom: 1rem;
  }

  .episode-meta {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .episode-badge {
    background: var(--surface);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 600;
  }

  .episode-duration {
    color: var(--text-secondary);
    padding: 0.5rem 0;
  }

  .audio-controls {
    background: var(--surface);
    padding: 2rem;
    border-radius: 16px;
    text-align: center;
    margin: 2rem 0;
  }

  .play-btn, .stop-btn {
    background: var(--primary);
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 30px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .play-btn:hover, .stop-btn:hover {
    background: var(--primary-dark);
    transform: translateY(-2px);
  }

  .stop-btn {
    background: #ef4444;
  }

  .stop-btn:hover {
    background: #dc2626;
  }

  .voice-info {
    background: var(--surface);
    padding: 1rem;
    border-radius: 12px;
    margin: 1rem 0;
  }

  .transcript {
    margin: 2rem 0;
  }

  .transcript summary {
    cursor: pointer;
    font-weight: 600;
    padding: 1rem;
    background: var(--surface);
    border-radius: 12px;
    margin-bottom: 1rem;
  }

  .transcript-content {
    background: var(--surface);
    padding: 2rem;
    border-radius: 12px;
    max-height: 400px;
    overflow-y: auto;
  }

  .dialogue-line {
    margin-bottom: 1.5rem;
  }

  .speaker {
    font-weight: 700;
    color: var(--primary);
    display: block;
    margin-bottom: 0.5rem;
  }

  .dialogue-text {
    padding-left: 1rem;
    display: block;
  }

  .articles-section h3 {
    margin-bottom: 1rem;
  }

  .articles-list {
    list-style: none;
  }

  .articles-list li {
    background: var(--surface);
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 0.75rem;
  }

  .articles-list a {
    color: var(--primary);
    text-decoration: none;
    font-weight: 500;
  }

  .articles-list a:hover {
    text-decoration: underline;
  }

  .article-meta {
    display: block;
    color: var(--text-secondary);
    font-size: 0.9rem;
    margin-top: 0.5rem;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .hero {
      flex-direction: column;
      text-align: center;
      gap: 2rem;
    }

    .controls {
      flex-direction: column;
    }

    .categories {
      grid-template-columns: 1fr;
    }

    .modal-content {
      margin: 5% auto;
      width: 95%;
      padding: 1.5rem;
    }
  }
</style>
