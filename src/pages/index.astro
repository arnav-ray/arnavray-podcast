---
import Layout from '../layouts/Layout.astro';

const title = 'Daily AI Podcasts - 5 Categories in English & German';
---

<Layout title={title}>
  <main>
    <header class="hero">
      <div class="hero-content">
        <h1>🎧 Daily AI Podcasts</h1>
        <p>Spicy commentary, hot takes & insider insights</p>
      </div>
      <div class="controls">
        <div class="language-toggle">
          <span>EN</span>
          <label class="switch">
            <input type="checkbox" id="languageToggle">
            <span class="slider"></span>
          </label>
          <span>DE</span>
        </div>
        <button class="theme-toggle" id="themeToggle">🌙</button>
      </div>
    </header>

    <section class="bunches-grid">
      <div class="categories" id="categoriesGrid">
        <div class="category-card" data-bunch="ai-tech">
          <div class="category-header">
            <div class="category-icon">🤖</div>
            <h3>AI & Tech</h3>
            <p>Cutting-edge tech, AI breakthroughs, startup drama</p>
          </div>
          <button class="generate-btn" data-bunch="ai-tech">Generate Today's Episode</button>
          <div class="episodes-container" id="ai-tech-episodes">
            <!-- Episodes will be loaded here -->
          </div>
        </div>
        
        <div class="category-card" data-bunch="finance-business">
          <div class="category-header">
            <div class="category-icon">💰</div>
            <h3>Finance & Business</h3>
            <p>Market moves, IPOs, mergers, financial scandals</p>
          </div>
          <button class="generate-btn" data-bunch="finance-business">Generate Today's Episode</button>
          <div class="episodes-container" id="finance-business-episodes">
            <!-- Episodes will be loaded here -->
          </div>
        </div>
        
        <div class="category-card" data-bunch="leadership-strategy">
          <div class="category-header">
            <div class="category-icon">🎯</div>
            <h3>Leadership & Strategy</h3>
            <p>CEO insights, management trends, strategic thinking</p>
          </div>
          <button class="generate-btn" data-bunch="leadership-strategy">Generate Today's Episode</button>
          <div class="episodes-container" id="leadership-strategy-episodes">
            <!-- Episodes will be loaded here -->
          </div>
        </div>
        
        <div class="category-card" data-bunch="science-innovation">
          <div class="category-header">
            <div class="category-icon">🔬</div>
            <h3>Science & Innovation</h3>
            <p>Research breakthroughs, scientific discoveries</p>
          </div>
          <button class="generate-btn" data-bunch="science-innovation">Generate Today's Episode</button>
          <div class="episodes-container" id="science-innovation-episodes">
            <!-- Episodes will be loaded here -->
          </div>
        </div>
        
        <div class="category-card" data-bunch="sunday-specials">
          <div class="category-header">
            <div class="category-icon">🎭</div>
            <h3>Sunday Specials</h3>
            <p>Lifestyle, humor, culture, weekend vibes</p>
          </div>
          <button class="generate-btn" data-bunch="sunday-specials">Generate Today's Episode</button>
          <div class="episodes-container" id="sunday-specials-episodes">
            <!-- Episodes will be loaded here -->
          </div>
        </div>
      </div>
    </section>
  </main>
</Layout>

<script>
  // Voice configurations
  const VOICE_CONFIG = {
    en: {
      host: { 
        rate: 1.05,
        pitch: 1.15,
        preferredVoices: ['Google UK English Female', 'Microsoft Zira', 'Samantha', 'Karen']
      },
      expert: { 
        rate: 0.9,
        pitch: 0.85,
        preferredVoices: ['Google UK English Male', 'Microsoft David', 'Daniel', 'Oliver']
      }
    },
    de: {
      host: { 
        rate: 0.95,
        pitch: 1.1,
        preferredVoices: ['Google Deutsch', 'Microsoft Hedda', 'Anna', 'Marlene']
      },
      expert: { 
        rate: 0.85,
        pitch: 0.8,
        preferredVoices: ['Google Deutsch', 'Microsoft Stefan', 'Hans', 'Conrad']
      }
    }
  };

  let currentLanguage = 'en';
  let episodeHistory = {};
  let isPlaying = false;
  let currentPlayingId = null;

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    initializeTheme();
    initializeLanguage();
    setupEventListeners();
    loadEpisodeHistory();
    loadVoices();
  });

  function initializeTheme() {
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', savedTheme);
    updateThemeToggle(savedTheme);
  }

  function initializeLanguage() {
    const savedLang = localStorage.getItem('language') || 'en';
    currentLanguage = savedLang;
    document.getElementById('languageToggle').checked = savedLang === 'de';
    updateLanguageUI();
  }

  function updateThemeToggle(theme) {
    const themeToggle = document.getElementById('themeToggle');
    themeToggle.textContent = theme === 'dark' ? '☀️' : '🌙';
  }

  function setupEventListeners() {
    // Theme toggle
    document.getElementById('themeToggle').addEventListener('click', () => {
      const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      updateThemeToggle(newTheme);
    });

    // Language toggle
    document.getElementById('languageToggle').addEventListener('change', (e) => {
      currentLanguage = e.target.checked ? 'de' : 'en';
      localStorage.setItem('language', currentLanguage);
      updateLanguageUI();
      loadEpisodeHistory();
    });

    // Generate buttons
    document.querySelectorAll('.generate-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const bunch = e.target.getAttribute('data-bunch');
        await generateEpisode(bunch);
      });
    });
  }

  function updateLanguageUI() {
    document.querySelectorAll('.generate-btn').forEach(btn => {
      btn.textContent = currentLanguage === 'de' ? 
        'Heutige Folge generieren' : 
        "Generate Today's Episode";
    });
  }

  async function generateEpisode(bunch) {
    const btn = document.querySelector(`[data-bunch="${bunch}"] .generate-btn`);
    const container = document.getElementById(`${bunch}-episodes`);
    
    btn.disabled = true;
    btn.textContent = currentLanguage === 'de' ? 'Generiere...' : 'Generating...';
    
    try {
      const response = await fetch(`/.netlify/functions/generate-podcast?bunch=${bunch}&lang=${currentLanguage}`);
      const data = await response.json();
      
      if (data.success && data.episode) {
        storeEpisode(data.episode);
        displayEpisodesInContainer(bunch);
      } else {
        alert(data.error || 'Failed to generate episode');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Network error. Please try again.');
    } finally {
      btn.disabled = false;
      updateLanguageUI();
    }
  }

  function storeEpisode(episode) {
    const key = `${episode.bunch}-${episode.language}`;
    if (!episodeHistory[key]) {
      episodeHistory[key] = [];
    }
    
    episodeHistory[key] = episodeHistory[key].filter(ep => ep.date !== episode.date);
    episodeHistory[key].unshift(episode);
    episodeHistory[key] = episodeHistory[key].slice(0, 30);
    
    localStorage.setItem('episodeHistory', JSON.stringify(episodeHistory));
  }

  function loadEpisodeHistory() {
    const saved = localStorage.getItem('episodeHistory');
    if (saved) {
      episodeHistory = JSON.parse(saved);
    }
    
    // Display episodes for each category
    ['ai-tech', 'finance-business', 'leadership-strategy', 'science-innovation', 'sunday-specials'].forEach(bunch => {
      displayEpisodesInContainer(bunch);
    });
  }

  function displayEpisodesInContainer(bunch) {
    const container = document.getElementById(`${bunch}-episodes`);
    const key = `${bunch}-${currentLanguage}`;
    const episodes = episodeHistory[key] || [];
    
    if (episodes.length === 0) {
      container.innerHTML = `<div class="no-episodes">${currentLanguage === 'de' ? 'Noch keine Folgen' : 'No episodes yet'}</div>`;
      return;
    }
    
    container.innerHTML = episodes.map((episode, index) => `
      <div class="episode ${index === 0 ? 'latest-episode' : ''}" id="episode-${episode.id}">
        <div class="episode-header">
          <h4>${episode.title}</h4>
          <span class="episode-date">${new Date(episode.date).toLocaleDateString()}</span>
        </div>
        
        <div class="episode-meta">
          <span class="meta-item">📱 ${episode.language.toUpperCase()}</span>
          <span class="meta-item">⏱️ ${episode.duration}</span>
          <span class="meta-item">📊 Score: ${episode.totalScore}</span>
        </div>
        
        <div class="episode-controls">
          <button class="play-btn" onclick="playEpisode('${episode.id}', \`${episode.script.replace(/`/g, '\\`').replace(/"/g, '&quot;')}\`, '${episode.language}')">
            ▶️ ${currentLanguage === 'de' ? 'Abspielen' : 'Play'}
          </button>
          <button class="stop-btn" onclick="stopEpisode('${episode.id}')" style="display: none;">
            ⏹️ Stop
          </button>
          <button class="transcript-btn" onclick="toggleTranscript('${episode.id}')">
            📝 ${currentLanguage === 'de' ? 'Transkript' : 'Transcript'}
          </button>
        </div>
        
        <div class="transcript" id="transcript-${episode.id}" style="display: none;">
          <h5>${currentLanguage === 'de' ? 'Transkript:' : 'Transcript:'}</h5>
          <div class="transcript-content">${formatTranscript(episode.script)}</div>
        </div>
        
        <div class="articles">
          <h5>${currentLanguage === 'de' ? '📰 Verwendete Artikel:' : '📰 Articles Used:'}</h5>
          <ul class="articles-list">
            ${episode.articles.map(article => `
              <li>
                <a href="${article.link}" target="_blank" rel="noopener noreferrer">
                  ${article.title}
                </a>
                <span class="article-meta">
                  <span class="source">${article.source}</span>
                  <span class="score">Score: ${article.score}</span>
                </span>
              </li>
            `).join('')}
          </ul>
        </div>
      </div>
    `).join('');
  }

  function formatTranscript(script) {
    return script
      .split('\n\n')
      .map(paragraph => {
        if (paragraph.includes(':')) {
          const colonIndex = paragraph.indexOf(':');
          const speaker = paragraph.substring(0, colonIndex);
          const text = paragraph.substring(colonIndex + 1);
          return `<div class="dialogue-line">
            <span class="speaker">${speaker}:</span>
            <span class="dialogue-text">${text}</span>
          </div>`;
        }
        return `<p>${paragraph}</p>`;
      })
      .join('');
  }

  function toggleTranscript(episodeId) {
    const transcript = document.getElementById(`transcript-${episodeId}`);
    transcript.style.display = transcript.style.display === 'none' ? 'block' : 'none';
  }

  window.playEpisode = async function(episodeId, script, language) {
    // Stop any currently playing episode
    if (currentPlayingId && currentPlayingId !== episodeId) {
      stopEpisode(currentPlayingId);
    }
    
    const playBtn = document.querySelector(`#episode-${episodeId} .play-btn`);
    const stopBtn = document.querySelector(`#episode-${episodeId} .stop-btn`);
    
    playBtn.style.display = 'none';
    stopBtn.style.display = 'inline-block';
    
    currentPlayingId = episodeId;
    isPlaying = true;
    
    const dialogueParts = parseDialogue(script);
    
    for (const part of dialogueParts) {
      if (!isPlaying || currentPlayingId !== episodeId) break;
      
      const utterance = new SpeechSynthesisUtterance(part.text);
      const config = VOICE_CONFIG[language][part.type];
      
      utterance.rate = config.rate;
      utterance.pitch = config.pitch;
      utterance.voice = findBestVoice(part.type, language);
      
      await new Promise(resolve => {
        utterance.onend = resolve;
        utterance.onerror = () => {
          console.error('Speech error');
          resolve();
        };
        speechSynthesis.speak(utterance);
      });
      
      if (isPlaying && currentPlayingId === episodeId) {
        await new Promise(resolve => setTimeout(resolve, 300));
      }
    }
    
    if (currentPlayingId === episodeId) {
      stopEpisode(episodeId);
    }
  };

  window.stopEpisode = function(episodeId) {
    speechSynthesis.cancel();
    isPlaying = false;
    
    const playBtn = document.querySelector(`#episode-${episodeId} .play-btn`);
    const stopBtn = document.querySelector(`#episode-${episodeId} .stop-btn`);
    
    if (playBtn) playBtn.style.display = 'inline-block';
    if (stopBtn) stopBtn.style.display = 'none';
    
    if (currentPlayingId === episodeId) {
      currentPlayingId = null;
    }
  };

  function loadVoices() {
    if ('speechSynthesis' in window) {
      speechSynthesis.getVoices();
      speechSynthesis.addEventListener('voiceschanged', () => {
        const voices = speechSynthesis.getVoices();
        console.log('Available voices:', voices.length);
      });
    }
  }

  function findBestVoice(speakerType, language) {
    const voices = speechSynthesis.getVoices();
    const config = VOICE_CONFIG[language][speakerType];
    
    for (const preferred of config.preferredVoices) {
      const voice = voices.find(v => v.name.includes(preferred));
      if (voice) return voice;
    }
    
    const langCode = language === 'de' ? 'de-DE' : 'en-GB';
    return voices.find(v => v.lang === langCode) || voices[0];
  }

  function parseDialogue(script) {
    const lines = script.split('\n\n').filter(line => line.trim());
    const parts = [];
    
    for (const line of lines) {
      if (line.includes(':')) {
        const colonIndex = line.indexOf(':');
        const speaker = line.substring(0, colonIndex).trim();
        const text = line.substring(colonIndex + 1).trim();
        
        if (text) {
          const speakerLower = speaker.toLowerCase();
          const isHost = speakerLower.includes('alex') || speakerLower.includes('markus');
          parts.push({
            speaker,
            text,
            type: isHost ? 'host' : 'expert'
          });
        }
      }
    }
    
    return parts;
  }

  window.toggleTranscript = toggleTranscript;
</script>

<style>
  :root {
    --primary: #3b82f6;
    --primary-dark: #2563eb;
    --secondary: #10b981;
    --background: #ffffff;
    --surface: #f8fafc;
    --text: #1f2937;
    --text-secondary: #6b7280;
    --border: #e5e7eb;
    --shadow: rgba(0, 0, 0, 0.1);
  }

  [data-theme="dark"] {
    --primary: #60a5fa;
    --primary-dark: #3b82f6;
    --secondary: #34d399;
    --background: #0f172a;
    --surface: #1e293b;
    --text: #f1f5f9;
    --text-secondary: #94a3b8;
    --border: #334155;
    --shadow: rgba(0, 0, 0, 0.3);
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: system-ui, -apple-system, sans-serif;
    background: var(--background);
    color: var(--text);
    line-height: 1.6;
    transition: background 0.3s ease, color 0.3s ease;
  }

  main {
    max-width: 1600px;
    margin: 0 auto;
    padding: 20px;
  }

  .hero {
    background: var(--surface);
    border-radius: 20px;
    padding: 2rem;
    margin-bottom: 3rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 4px 6px var(--shadow);
  }

  .hero h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }

  .hero p {
    color: var(--text-secondary);
    font-size: 1.1rem;
  }

  .controls {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  .language-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
  }

  .switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 30px;
  }

  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--border);
    transition: .4s;
    border-radius: 30px;
  }

  .slider:before {
    position: absolute;
    content: "";
    height: 22px;
    width: 22px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
  }

  input:checked + .slider {
    background-color: var(--primary);
  }

  input:checked + .slider:before {
    transform: translateX(30px);
  }

  .theme-toggle {
    background: var(--surface);
    border: 2px solid var(--border);
    border-radius: 50%;
    width: 45px;
    height: 45px;
    font-size: 1.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .theme-toggle:hover {
    background: var(--primary);
    border-color: var(--primary);
  }

  .categories {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));
    gap: 2rem;
  }

  .category-card {
    background: var(--surface);
    border-radius: 16px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px var(--shadow);
  }

  .category-header {
    margin-bottom: 1rem;
  }

  .category-icon {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }

  .category-header h3 {
    font-size: 1.4rem;
    margin-bottom: 0.5rem;
  }

  .category-header p {
    color: var(--text-secondary);
    font-size: 0.95rem;
  }

  .generate-btn {
    width: 100%;
    background: var(--primary);
    color: white;
    border: none;
    padding: 0.75rem;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 1rem;
  }

  .generate-btn:hover:not(:disabled) {
    background: var(--primary-dark);
  }

  .generate-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .episodes-container {
    max-height: 600px;
    overflow-y: auto;
  }

  .episode {
    background: var(--background);
    border: 1px solid var(--border);
    border-radius: 12px;
    padding: 1rem;
    margin-bottom: 1rem;
  }

  .latest-episode {
    border: 2px solid var(--primary);
  }

  .episode-header {
    display: flex;
    justify-content: space-between;
    align-items: start;
    margin-bottom: 0.75rem;
  }

  .episode-header h4 {
    font-size: 1.1rem;
    flex: 1;
    margin-right: 1rem;
  }

  .episode-date {
    color: var(--text-secondary);
    font-size: 0.9rem;
    white-space: nowrap;
  }

  .episode-meta {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
  }

  .meta-item {
    font-size: 0.85rem;
    color: var(--text-secondary);
  }

  .episode-controls {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .play-btn, .stop-btn, .transcript-btn {
    background: var(--primary);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .play-btn:hover, .transcript-btn:hover {
    background: var(--primary-dark);
  }

  .stop-btn {
    background: #ef4444;
  }

  .stop-btn:hover {
    background: #dc2626;
  }

  .transcript {
    background: var(--surface);
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 1rem;
  }

  .transcript h5 {
    margin-bottom: 1rem;
    color: var(--primary);
  }

  .transcript-content {
    max-height: 300px;
    overflow-y: auto;
  }

  .dialogue-line {
    margin-bottom: 1rem;
  }

  .speaker {
    font-weight: 700;
    color: var(--primary);
    display: block;
    margin-bottom: 0.25rem;
  }

  .dialogue-text {
    padding-left: 1rem;
    display: block;
  }

  .articles {
    background: var(--surface);
    padding: 1rem;
    border-radius: 8px;
  }

  .articles h5 {
    margin-bottom: 0.75rem;
    color: var(--primary);
  }

  .articles-list {
    list-style: none;
  }

  .articles-list li {
    margin-bottom: 0.75rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid var(--border);
  }

  .articles-list li:last-child {
    border-bottom: none;
    margin-bottom: 0;
    padding-bottom: 0;
  }

  .articles-list a {
    color: var(--primary);
    text-decoration: none;
    font-weight: 500;
    display: block;
    margin-bottom: 0.25rem;
  }

  .articles-list a:hover {
    text-decoration: underline;
  }

  .article-meta {
    display: flex;
    gap: 1rem;
    font-size: 0.85rem;
    color: var(--text-secondary);
  }

  .source {
    font-style: italic;
  }

  .score {
    font-weight: 600;
    color: var(--secondary);
  }

  .no-episodes {
    text-align: center;
    color: var(--text-secondary);
    padding: 2rem;
  }

  /* Scrollbar for episodes container */
  .episodes-container::-webkit-scrollbar {
    width: 6px;
  }

  .episodes-container::-webkit-scrollbar-track {
    background: var(--surface);
    border-radius: 3px;
  }

  .episodes-container::-webkit-scrollbar-thumb {
    background: var(--border);
    border-radius: 3px;
  }

  .episodes-container::-webkit-scrollbar-thumb:hover {
    background: var(--text-secondary);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .hero {
      flex-direction: column;
      text-align: center;
      gap: 2rem;
    }

    .controls {
      flex-direction: column;
    }

    .categories {
      grid-template-columns: 1fr;
    }

    .episode-header {
      flex-direction: column;
      gap: 0.5rem;
    }

    .episode-controls {
      flex-wrap: wrap;
    }
  }
</style>
